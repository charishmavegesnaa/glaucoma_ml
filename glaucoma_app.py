# -*- coding: utf-8 -*-
"""glaucoma_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-GMl6wQyCP6ojVbfTLCFIomCMHUO_53r
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.preprocessing import StandardScaler

st.title("Glaucoma Classification App")

# Load model with the correct filename
try:
    with open('logreg_model.pkl', 'rb') as f:
        model = pickle.load(f)
except FileNotFoundError:
    st.error("Model file 'logreg_model.pkl' not found. Please ensure it is in the same directory.")
    st.stop()

st.sidebar.header("Enter Patient Details")

age = st.sidebar.slider('Age', 10, 100, 50)
visual_acuity = st.sidebar.slider('Visual Acuity Measurement', 0.0, 2.0, 1.0)
intraocular_pressure = st.sidebar.slider('Intraocular Pressure (IOP)', 5, 50, 15)
cup_to_disc_ratio = st.sidebar.slider('Cup-to-Disc Ratio (CDR)', 0.0, 1.0, 0.3)
family_history = st.sidebar.selectbox('Family History of Glaucoma', ['No', 'Yes'])
medical_history = st.sidebar.selectbox('Medical History', ['None', 'Diabetes', 'Hypertension', 'Other'])
cataract_status = st.sidebar.selectbox('Cataract Status', ['No', 'Yes'])
angle_closure_status = st.sidebar.selectbox('Angle Closure Status', ['No', 'Yes'])
visual_field_test = st.sidebar.slider('Visual Field Test Result', 0, 100, 50)
oct_results = st.sidebar.slider('Optical Coherence Tomography (OCT) Result', 0, 100, 50)
pachymetry = st.sidebar.slider('Pachymetry', 300, 600, 550)

def preprocess_input():
    data = {
        'Age': age,
        'Visual Acuity Measurements': visual_acuity,
        'Intraocular Pressure (IOP)': intraocular_pressure,
        'Cup-to-Disc Ratio (CDR)': cup_to_disc_ratio,
        'Family History_Yes': 1 if family_history == 'Yes' else 0,
        'Medical History_Diabetes': 1 if medical_history == 'Diabetes' else 0,
        'Medical History_Hypertension': 1 if medical_history == 'Hypertension' else 0,
        'Medical History_Other': 1 if medical_history == 'Other' else 0,
        'Cataract Status_Yes': 1 if cataract_status == 'Yes' else 0,
        'Angle Closure Status_Yes': 1 if angle_closure_status == 'Yes' else 0,
        'Visual Field Test Results': visual_field_test,
        'Optical Coherence Tomography (OCT) Results': oct_results,
        'Pachymetry': pachymetry,
    }
    input_df = pd.DataFrame([data])

    scaler_features = ['Age', 'Visual Acuity Measurements', 'Intraocular Pressure (IOP)',
                       'Cup-to-Disc Ratio (CDR)', 'Visual Field Test Results',
                       'Optical Coherence Tomography (OCT) Results', 'Pachymetry']

    scaler = StandardScaler()
    input_df[scaler_features] = scaler.fit_transform(input_df[scaler_features])
    
    return input_df

if st.sidebar.button("Predict"):
    input_data = preprocess_input()
    prediction = model.predict(input_data)
    st.subheader("Prediction Result")
    st.write(f"The predicted glaucoma type is: {prediction[0]}")

st.write("""
Instructions:
1. Enter the patient details using the sidebar input controls.
2. Click the Predict button to get the glaucoma type prediction.
""")

