# -*- coding: utf-8 -*-
"""glaucoma_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-GMl6wQyCP6ojVbfTLCFIomCMHUO_53r
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle

st.title("Glaucoma Classification App")

# Load the saved logistic regression model
try:
    with open('logreg_model.pkl', 'rb') as file:
        model = pickle.load(file)
except FileNotFoundError:
    st.error("Model file 'logreg_model.pkl' not found.")
    st.stop()

# User inputs in sidebar
st.sidebar.header("Enter Patient Details")

age = st.sidebar.number_input('Age', min_value=4, max_value=90, value=50)
gender = st.sidebar.selectbox('Gender', ['Male', 'Female'])
visual_acuity = st.sidebar.selectbox('Visual Acuity Measurements', ['LogMAR 0.0', 'LogMAR 0.1', '2040', 'Other'])
intraocular_pressure = st.sidebar.number_input('Intraocular Pressure (IOP)', min_value=10.0, max_value=90.0, value=20.0)
cup_to_disc_ratio = st.sidebar.number_input('Cup-to-Disc Ratio (CDR)', min_value=0.3, max_value=0.8, value=0.5)
family_history = st.sidebar.selectbox('Family History', ['No', 'Yes'])
pachymetry = st.sidebar.number_input('Pachymetry', min_value=500.0, max_value=600.0, value=550.0)
cataract_status = st.sidebar.selectbox('Cataract Status', ['Present', 'Absent'])
angle_closure_status = st.sidebar.selectbox('Angle Closure Status', ['Open', 'Closed'])
diagnosis = st.sidebar.selectbox('Diagnosis', ['Glaucoma', 'No Glaucoma'])

# Prepare input dataframe as per training features
def preprocess_input():
    data = {
        'Age': age,
        'Gender_Female': 1 if gender == 'Female' else 0,
        'Gender_Male': 1 if gender == 'Male' else 0,
        'Visual Acuity Measurements_2040': 1 if visual_acuity == '2040' else 0,
        'Visual Acuity Measurements_LogMAR 0.0': 1 if visual_acuity == 'LogMAR 0.0' else 0,
        'Visual Acuity Measurements_LogMAR 0.1': 1 if visual_acuity == 'LogMAR 0.1' else 0,
        'Visual Acuity Measurements_Other': 1 if visual_acuity == 'Other' else 0,
        'Intraocular Pressure IOP': intraocular_pressure,
        'Cup-to-Disc Ratio CDR': cup_to_disc_ratio,
        'Family History_No': 1 if family_history == 'No' else 0,
        'Family History_Yes': 1 if family_history == 'Yes' else 0,
        'Pachymetry': pachymetry,
        'Cataract Status_Absent': 1 if cataract_status == 'Absent' else 0,
        'Cataract Status_Present': 1 if cataract_status == 'Present' else 0,
        'Angle Closure Status_Closed': 1 if angle_closure_status == 'Closed' else 0,
        'Angle Closure Status_Open': 1 if angle_closure_status == 'Open' else 0,
        'Diagnosis_Glaucoma': 1 if diagnosis == 'Glaucoma' else 0,
        'Diagnosis_No Glaucoma': 1 if diagnosis == 'No Glaucoma' else 0,
    }

    # Construct dataframe with all expected columns from training
    feature_columns = [
        'Age',
        'Gender_Female', 'Gender_Male',
        'Visual Acuity Measurements_2040', 'Visual Acuity Measurements_LogMAR 0.0', 'Visual Acuity Measurements_LogMAR 0.1', 'Visual Acuity Measurements_Other',
        'Intraocular Pressure IOP',
        'Cup-to-Disc Ratio CDR',
        'Family History_No', 'Family History_Yes',
        'Pachymetry',
        'Cataract Status_Absent', 'Cataract Status_Present',
        'Angle Closure Status_Closed', 'Angle Closure Status_Open',
        'Diagnosis_Glaucoma', 'Diagnosis_No Glaucoma'
    ]

    # Add any missing columns with 0 (important for dummy encoding consistency)
    for col in feature_columns:
        if col not in data:
            data[col] = 0

    input_df = pd.DataFrame([data])
    input_df = input_df[feature_columns]  # reorder columns to match training order

    return input_df

if st.sidebar.button("Predict"):
    input_data = preprocess_input()
    prediction = model.predict(input_data)
    st.subheader("Prediction Result")
    st.write(f"Predicted Glaucoma Type: {prediction[0]}")

st.write("""
Use the sidebar to input patient clinical data and get a glaucoma type prediction.
""")
